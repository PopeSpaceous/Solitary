using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.Linq;
using System;
using Random = UnityEngine.Random;

public class WordPasscode : Puzzle
{

    // Sets the parent fields
    /*
    void Awake()
    {
        puzzleName = "WordPasscode";
        difficulty = NextSceneManager.instance.setPuzzledifficulty;
        placeholder = NextSceneManager.instance.placeholder;
        Debug.Log("Difficulty for puzzle " + puzzleName + " is: " + this.difficulty);
    }
    */

    /* Your wonderful startup puzzle code here :3 */
    // This code automatically generated by TableCodeGen

    //list of questions
    public Questions[] questions;

    //list of unanswered questions
    private static List<Questions> unansweredQuestions;

    private Questions currentQuestion;

    //counter variables
    //try making these static so they dont reset after scene is restarted
    //take the variables out from Question.cs
    //private int totalQuestionsAnswered;
    //private int numErrors;

    [SerializeField]
    private Text questionText;

    [SerializeField]
    private Text optionA;

    [SerializeField]
    private Text optionB;

    [SerializeField]
    private Text optionC;

    [SerializeField]
    private Text optionD;

    [SerializeField]
    private Text questionsAnswered;

    private void Start()
    {
        //load all unanswered questions into unanswered question list
        if (unansweredQuestions == null || unansweredQuestions.Count == 0)
        {
            unansweredQuestions = questions.ToList<Questions>();
        }

        //get a random question
        SetCurrentQuestion();
        //debugging
        //Debug.Log(currentQuestion.question + " has possible answers: " + currentQuestion.a + currentQuestion.b + currentQuestion.c + currentQuestion.d + " and the answer is " + currentQuestion.answer);
    }

    void SetCurrentQuestion()
    {
        int randQuestionIndex = Random.Range(0, unansweredQuestions.Count);

        //set current question to randomly selected question
        currentQuestion = unansweredQuestions[randQuestionIndex];

        //display question in panel
        questionText.text = currentQuestion.question;

        //display multiple choice options
        optionA.text = currentQuestion.a;
        optionB.text = currentQuestion.b;
        optionC.text = currentQuestion.c;
        optionD.text = currentQuestion.d;

        
        //questionsAnswered = totalQuestionsAnswered;
 
    }

    //transition to next question
    void LoadNextQuestion()
    {
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
    }

    //code for users selected answer
    //option A
    public void UserSelectA()
    {
        if (currentQuestion.a == currentQuestion.answer)
        {
            Debug.Log("CORRECT");
            currentQuestion.totalQuestionsAnswered += 1;
            Invoke("LoadNextQuestion", 0.5f);
            Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
            Debug.Log("total questions wrong " + currentQuestion.totalErrors);
        } else
        {
            Debug.Log("INCORRECT");
            currentQuestion.totalErrors += 1;
            Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
            Debug.Log("total questions wrong " + currentQuestion.totalErrors);
        }

    }

    //option B
    public void UserSelectB() {

        if (currentQuestion.b == currentQuestion.answer)
        {
            Debug.Log("CORRECT");
            currentQuestion.totalQuestionsAnswered += 1;
            Invoke("LoadNextQuestion", 0.5f);
            Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
            Debug.Log("total questions wrong " + currentQuestion.totalErrors);
        }
        else
        {
            Debug.Log("INCORRECT");
            currentQuestion.totalErrors += 1;
            Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
            Debug.Log("total questions wrong " + currentQuestion.totalErrors);
        }

    }

    //option C
    public void UserSelectC() {
        
        if (currentQuestion.c == currentQuestion.answer)
        {
            if (currentQuestion.c == currentQuestion.answer)
            {
                Debug.Log("CORRECT");
                currentQuestion.totalQuestionsAnswered += 1;
                Invoke("LoadNextQuestion", 0.5f);
                Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
                Debug.Log("total questions wrong " + currentQuestion.totalErrors);
            }
            else
            {
                Debug.Log("INCORRECT");
                currentQuestion.totalErrors += 1;
                Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
                Debug.Log("total questions wrong " + currentQuestion.totalErrors);
            }
        }

        
    }

    //option D
    public void UserSelectD() { 
        
        if (currentQuestion.d == currentQuestion.answer)
        {
            if (currentQuestion.d == currentQuestion.answer)
            {
                Debug.Log("CORRECT");
                currentQuestion.totalQuestionsAnswered += 1;
                Invoke("LoadNextQuestion", 0.5f);
                Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
                Debug.Log("total questions wrong " + currentQuestion.totalErrors);
            }
            else
            {
                Debug.Log("INCORRECT");
                currentQuestion.totalErrors += 1;
                Debug.Log("total questions answered " + currentQuestion.totalQuestionsAnswered);
                Debug.Log("total questions wrong " + currentQuestion.totalErrors);
            }
        }

    }

}